{
    "posts": [
        {
            "postId": "1",
            "postTitle": "Setup Triple R (React + Redux + Router)",
            "postTags": "react, redux, react router",
            "postType": "1",
            "postImage": "https://i.postimg.cc/26pjLZLd/trippleR.png",
            "postDate": "12/5/2022",
            "postContent": "<h1>1. Create Project</h1> <p>Source: <a href=\"https://create-react-app.dev/docs/getting-started\">https://create-react-app.dev/docs/getting-started</a></p> <p><code>npx create-react-app my-app</code></p> <h1>2. Import Libary</h1> <h2>2.1. Redux with Redux Toolkit</h2> <p>Source: <a href=\"https://redux.js.org/introduction/getting-started\">https://redux.js.org/introduction/getting-started</a></p> <p><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span class=\"token plain\"> @reduxjs/toolkit</span></code></p> <p><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span class=\"token plain\"> redux</span></code></p> <p><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span class=\"token plain\"> react-redux</span></code></p> <h2>2.2. React Router</h2> <p>Source: <a href=\"https://reactrouter.com/en/main/start/tutorial\">https://reactrouter.com/en/main/start/tutorial</a></p> <p><code class=\"language-sh\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> react-router-dom</code></p> <h1>3. Create Directory Structure</h1> <p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.postimg.cc/TYLqK3jF/1-structure.png\" width=\"379\" height=\"675\"></p> <p>&nbsp;</p> <p style=\"text-align: left;\"><strong>assets:&nbsp;</strong>contains assets data such as default data json, fonts, images...</p> <p style=\"text-align: left;\"><strong>components: </strong>contains components can reuse in pages</p> <p style=\"text-align: left;\"><strong>pages: </strong>contains pages in website</p> <p style=\"text-align: left;\"><strong>redux: </strong>redux setup folder as below</p> <ul style=\"text-align: left;\"> <li><strong>actions: </strong>contains redux actions declare</li> <li><strong>reducers: </strong>contains redux code work with state</li> <li><strong>types: </strong>contains redux types name</li> <li><strong>configStore.js: </strong>setup config for redux</li> </ul> <p style=\"text-align: left;\"><strong>templates: </strong>contains templates outline for pages</p> <h1 style=\"text-align: left;\">4. Setup Project</h1> <h2>4.1 Setup Redux with Toolkit</h2> <ul> <li>First Setup configStore.js in Redux folder</li> </ul> <p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.postimg.cc/JnTktNHZ/1-config-Store.png\" width=\"947\" height=\"609\"></p> <ul> <li>Last setup store in index.js</li> </ul> <p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.postimg.cc/SKdqpVHL/1-redux.png\" width=\"946\" height=\"592\"></p> <h2>4.2 Setup React Router</h2> <p><strong>Import in App.js</strong></p> <div> <div><code>import { BrowserRouter, Routes, Route } from \"react-router-dom\";</code></div> <div>&nbsp;</div> <div><strong>React Router Structure</strong></div> <div> <table style=\"border-collapse: collapse; width: 99.9865%;\" border=\"1\"><colgroup><col style=\"width: 100%;\"></colgroup> <tbody> <tr> <td> <div>&lt;BrowserRouter&gt;</div> <div>&nbsp; &nbsp; &nbsp; &lt;Routes&gt;</div> <div>&nbsp; &nbsp; &nbsp; &nbsp; &lt;Route path=\"*\" element={&lt;Page/&gt;} /&gt;</div> <div>&nbsp; &nbsp; &nbsp; &lt;/Routes&gt;</div> <div>&lt;/BrowserRouter&gt;</div> </td> </tr> </tbody> </table> </div> <div>&nbsp;</div> <div>My App.js</div> <div><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://i.postimg.cc/3rcCvXDr/1-router.png\"></div> <div>&nbsp;</div> <div>The tutorial is complete, I hope you did it successfully and happy coding !</div> </div>",
            "postDescription": "Quick setup ReactJS + Redux toolkit + React router with logical directory structure."
        },
        {
            "postId": "2",
            "postTitle": "Create Arrow Button Back To Top",
            "postTags": "react, css, utilities",
            "postType": "2",
            "postImage": "https://i.postimg.cc/mk1nqB3T/backTop.png",
            "postDate": "12/5/2022",
            "postContent": "<h1>1. Create Arrow Up Button</h1> <h2>1.1 Create Component</h2> <p><img src=\"https://i.postimg.cc/fLLHTGMK/2-code-HTML.png\"></p> <h2>1.2 Create CSS</h2> <p><img src=\"https://i.postimg.cc/q7QbrJHq/2-code-CSS.png\"></p> <h2>1.3 Attach to Website</h2> <p>You need attach this button to whatever page you want to display.</p> <p><img src=\"https://i.postimg.cc/3RS6rhV8/2-attach.png\"></p> <h1>2. Setup State</h1> <p>Import useEffect and useState from react</p> <p>Create state to manage hide or show button when scroll, we don't want button show when page already on top.</p> <p>Function scrollUp make page return to top by javaScript</p> <p><img src=\"https://i.postimg.cc/FRBTfTRQ/2-code.png\"></p> <p>The tutorial is complete, I hope you did it successfully and happy coding !</p>",
            "postDescription": "Create modern back to top button without libary"
        },
        {
            "postId": "3",
            "postTitle": "Create Popup Modal",
            "postTags": "react, redux, utilities",
            "postType": "2",
            "postImage": "https://i.postimg.cc/sDk3yPc4/modal-Popup.png",
            "postDate": "12/5/2022",
            "postContent": "<h1>1. Create Component</h1> <h2>1.1 Create HTML</h2> <p><img src=\"https://i.postimg.cc/wTR4yV2g/3-code-HTML.png\"></p> <h2>1.2 Create CSS</h2> <p><img src=\"https://i.postimg.cc/K4hYGj9L/3-code-CSS.png\"></p> <h1>2. Save State with Redux</h1> <h2>2.1 Create Type</h2> <p><img src=\"https://i.postimg.cc/05FcsSs3/3-type.png\"></p> <h2>2.2 Create Action<img style=\"font-size: 14px;\" src=\"https://i.postimg.cc/xjcthRWM/3-action.png\"></h2> <h2>2.3 Create Reducer<img style=\"font-size: 14px;\" src=\"https://i.postimg.cc/wTNFTBxB/3-reducer.png\"></h2> <h1>3. Call Modal</h1> <p>Open Modal</p> <p><code>onClick={() =&gt; { dispatch(SearchModalAction(true)) }}</code></p> <p>Close Modal</p> <div> <div>&nbsp;<code>onClick={() =&gt; { dispatch(SearchModalAction(false)) }}</code></div> <div> <div>&nbsp;</div> Setup by useSelector select state from ModalReducer to display classname with or without style visibility modal</div> </div> <p><img src=\"https://i.postimg.cc/wMNmQ734/3-code-Dispatch.png\"></p>",
            "postDescription": "Create modern popup modal can call anywhere with css and redux"
        },
        {
            "postId": "4",
            "postTitle": "Create Scroll Progress Bar ",
            "postTags": "react, css, utilities",
            "postType": "2",
            "postImage": "https://i.postimg.cc/tJWCj8tk/progress.webp",
            "postDate": "12/5/2022",
            "postContent": "<h1>1. Setup scroll event</h1> <p>Create scroll state and set it equal percent scrolled</p> <div> <div><code>const [scroll, setScroll] = useState(0);</code></div> <div>&nbsp;</div> </div> <p><img src=\"https://i.postimg.cc/ZY7LB2mn/4-code.png\"></p> <p>After that set style in progress bar with transform scale to scale progress with equal scrolled progress</p> <div> <div><code>&lt;div id=\"progressBar\" style={{ transform: `scale(${scroll}, 1)` }} /&gt;</code></div> <div>&nbsp;</div> <h1>2. Styling</h1> <p>Fixed progress bar position and transform-origin top left to make it start from left to right</p> <p><img src=\"https://i.postimg.cc/Gt5PW8KG/4-css.png\"></p> <div>&nbsp;</div> </div>",
            "postDescription": "Create a custom Scrolling progress bar that displays at the top to show page scrolling progress"
        },
        {
            "postId": "5",
            "postTitle": "React vs Angular",
            "postTags": "react, angular",
            "postType": "1",
            "postImage": "https://i.postimg.cc/2jwKf9zd/Angular-vs-React.png",
            "postDate": "12/5/2022",
            "postContent": "<h1>1. About React</h1> <p>React is a front-end JavaScript libary, that allows you to build user interfaces from reusable UI components. React uses server-side rendering to provide a flexible and performance-based solution. It allows developers to create seamless UX and complex UI.</p> <h1>2. About Angular</h1> <p>Angular is an open-source JavaScript front-end framework developed and managed by Google&rsquo;s Angular team. Angular is the most popular client-side framework for developing scalable and high-performing mobile and web apps using HTML, CSS, and TypeScript.</p> <h1>3. Difference Between Angular and React</h1> <ul> <li><strong>AngularJS</strong>&nbsp;is an open-source platform developed by Google, while&nbsp;<strong>ReactJS</strong>&nbsp;is an open-source library developed by Facebook.</li> <li><strong>Angular JS</strong>&nbsp;is a TypeScript-based web application framework, whereas&nbsp;<strong>React JS</strong>&nbsp;is a JavaScript-based library.</li> <li>While talking about React JS vs Angular,&nbsp;<strong>Angular</strong>&nbsp;is a JS framework built using TypeScript, whereas&nbsp;<strong>React</strong>&nbsp;JS is a JS library built using JSX.</li> <li><strong>React.js</strong>&nbsp;is mostly used to build interactive UI components with frequently variable data, whereas&nbsp;<strong>Angular.js</strong> is used to build complex enterprise apps like progressive web apps and single-page-app. <table style=\"border-collapse: collapse; width: 100%; height: 372.4px; border-width: 1px;\" border=\"1\"> <thead> <tr style=\"height: 19.6px;\"> <th style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Parameters</strong></th> <th style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\"><strong>Angular</strong></th> <th style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\"><strong>React</strong></th> </tr> </thead> <tbody> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Developed By</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Google</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Facebook</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Release Year</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">2009</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">2013</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Written In</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">TypeScript</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">JavaScript</td> </tr> <tr style=\"height: 39.2px;\"> <td style=\"width: 13.3057%; height: 39.2px; border-width: 1px;\"><strong>Technology Type</strong></td> <td style=\"width: 40.4626%; height: 39.2px; border-width: 1px;\">Full-fledged MVC framework written in JavaScript</td> <td style=\"width: 42.0911%; height: 39.2px; border-width: 1px;\">JavaScript library (View in MVC; requires Flux to implement architecture)</td> </tr> <tr style=\"height: 39.2px;\"> <td style=\"width: 13.3057%; height: 39.2px; border-width: 1px;\"><strong>Concept</strong></td> <td style=\"width: 40.4626%; height: 39.2px; border-width: 1px;\">Brings JavaScript into HTML Works with the real DOM Client-side rendering</td> <td style=\"width: 42.0911%; height: 39.2px; border-width: 1px;\">Brings HTML into JavaScript Works with the virtual DOM Server-side rendering</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Data Binding</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Two-way data binding</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">One-way data binding</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Language</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">JavaScript + HTML</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">JavaScript + JSX</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Learning Curve</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Steep</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Moderate</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>UI Rendering</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Client/Server-Side</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Client/Server-Side</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Best Suited For</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Highly active and interactive web apps</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Larger apps with recurrent variable data</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>App Structure</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Fixes and complicated MVC</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Flexible component-based view</td> </tr> <tr style=\"height: 39.2px;\"> <td style=\"width: 13.3057%; height: 39.2px; border-width: 1px;\"><strong>Dependency Injection</strong></td> <td style=\"width: 40.4626%; height: 39.2px; border-width: 1px;\">Fully supported</td> <td style=\"width: 42.0911%; height: 39.2px; border-width: 1px;\">Not supported</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Performance</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">High</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">High</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>DOM Type</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">Real</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Virtual</td> </tr> <tr style=\"height: 19.6px;\"> <td style=\"width: 13.3057%; height: 19.6px; border-width: 1px;\"><strong>Popular Apps</strong></td> <td style=\"width: 40.4626%; height: 19.6px; border-width: 1px;\">IBM, PayPal, Freelancer, Upwork</td> <td style=\"width: 42.0911%; height: 19.6px; border-width: 1px;\">Facebook, Skype, Instagram, Walmart</td> </tr> </tbody> </table> </li> </ul> <h1>4. Summary</h1> <p>Now is the time to discuss some favorable parameters for choosing Angular or React.</p> <h3>Choose Angular When:</h3> <ul> <li>You need to develop a feature-rich enterprise-grade application.</li> <li>There is a low to medium-level app complexity.</li> <li>You want ready-made solutions and enhanced productivity.</li> <li>The developers have a good knowledge of C#, Java, and Angular.</li> </ul> <h3>Choose React When:</h3> <ul> <li>The developers have good expertise in HTML, CSS, and JavaScript.</li> <li>You need to build a customized application.</li> <li>You need an app with several events.</li> <li>You need sharable elements in your app.</li> </ul>",
            "postDescription": "Which framework is better - Angular or React? To help you find answers to the above questions, I will have a detailed comparison between these front-end frameworks."
        },
        {
            "postId": "6",
            "postTitle": "Setup Multiple Languages with i18next",
            "postTags": "react, i18next, utilities",
            "postType": "2",
            "postImage": "https://i.postimg.cc/NFKm2yMY/i18next.png",
            "postDate": "12/5/2022",
            "postContent": "<h1>1. Import Libary</h1> <p>Source: <a href=\"https://www.i18next.com/overview/getting-started\">https://www.i18next.com/overview/getting-started</a></p> <p><code>$ npm install i18next</code></p> <p><code>$ npm install i18next-http-backend</code></p> <div> <div> <div> <div><code>$ npm install i18next-browser-languagedetector</code></div> </div> </div> </div> <h1>2. Setup i18next</h1> <div> <div>Create i18n.js in src folder, next create locales folder contains languages text files and import './i18n' in index.js</div> </div> <p><img src=\"https://i.postimg.cc/YqMQmMh6/6-i18.png\"></p> <p><img src=\"https://i.postimg.cc/1zQBmTLX/6-locales.png\"></p> <h1>3. Using in project</h1> <h2>3.1 Setup button change language</h2> <div>&nbsp;</div> <div> <div> <table style=\"border-collapse: collapse; width: 100.47%; height: 176.4px;\" border=\"1\"><colgroup><col style=\"width: 100%;\"></colgroup> <tbody> <tr style=\"height: 176.4px;\"> <td style=\"height: 176.4px;\"> <div> <div>import { useState } from \"react\";</div> </div> <div> <div> <div> <div>import { useTranslation } from 'react-i18next';</div> <div>&nbsp;</div> </div> </div> <div> <div> <div>&nbsp;const { i18n } = useTranslation();</div> </div> &nbsp;const [language, setLanguage] = useState(\"en\");</div> <div> <div> <div>&nbsp;const handleChange = (value) =&gt; {</div> <div>&nbsp; &nbsp; i18n.changeLanguage(value);</div> <div>&nbsp; &nbsp; setLanguage(value);</div> <div>&nbsp;}</div> </div> </div> </div> </td> </tr> </tbody> </table> <p>&lt;a onClick={() =&gt; handleChange(\"vn\")&gt;VN&lt;/a&gt;</p> </div> </div> <h2>3.2 Display text in selected language</h2> <div> <div><code>import { useTranslation } from 'react-i18next';</code></div> <div>&nbsp;</div> </div> <div> <div><code>const { t } = useTranslation();</code></div> <div>&nbsp;</div> <div>Call t(\"[text key in langquage file]\")</div> </div> <div> <div><code>&lt;span&gt;{t(\"home\")}&lt;/span&gt;</code></div> </div>",
            "postDescription": "Make the website can display text in many different languages with i18next."
        },
        {
            "postId": "7",
            "postTitle": "ReactJS and React Native",
            "postTags": "react native, react",
            "postType": "1",
            "postImage": "https://i.postimg.cc/nrrCtMv7/React-Native-vs-Reactjs.png",
            "postDate": "12/5/2022",
            "postContent": "<h1 id=\"intro\">1. Introduction: React vs React Native?</h1> <p>React and React Native are developed by Facebook and have gained a huge fan base in a short time. React is known as ReactJS, which is a JavaScript library to build single-page web applications.</p> <p>Besides, React Native is a React JS-based framework to design mobile apps. Moreover, with reusable components, you can develop native mobile applications.</p> <h1 id=\"react\">2. What&rsquo;s React?</h1> <p>React, or ReactJs is an open-source JavaScript library used to develop single-page web applications. It&rsquo;s one of the popular libraries to build UI (front-end) for web and mobile apps. It was developed and backed by Facebook in 2011 and has gained popularity since then.</p> <h1>3. What&rsquo;s React Native?</h1> <p><strong>React Native:</strong>&nbsp;A Native Mobile Development Library</p> <p>React Native is an open-source JavaScript-based framework developed by Facebook to meet its growing demand of mobile needs. React Native is a hybrid mobile app framework, allowing you to develop mobile applications with a single codebase. This JavaScript framework lets you build mobile apps that render natively across different platforms like iOS and Android.</p> <h1 id=\"difference\">4. Difference Between React and React Native</h1> <p>So what are the key technical differences between ReactJS and React Native?</p> <h3>*Framework</h3> <p>ReactJS is simply a JavaScript library, which enables the developer to create an engaging and high performing UI layer where as React Native is a framework for building cross-platform apps, for web applications, iOS and Android.</p> <h3>*Rendering</h3> <p>In ReactJS, virtual DOM is used to render browser code in Reactjs but in React Native, native APIs are used to render components in mobile.</p> <h3>*UI components</h3> <p>The apps developed with ReactJS render HTML in UI compared with React Native which uses JSX for rendering UI components, a syntax extension to JavaScript.</p> <h3>*Styling</h3> <p>CSS is used for creating styling in ReactJS but a stylesheet is used for styling in React Native.</p> <h3>*Animation</h3> <p>In ReactJS, animation is possible using CSS, whereas React Native doesn&rsquo;t use CSS but an animated API for inducing animation across different components of the React Native app.</p> <h1>5. Conclusion</h1> <p>Essentially, React (or ReactJS) is designed for web applications, while React Native is engineered for cross-platform mobile development.</p> <p>For a high performing, dynamic, and responsive UI for web interfaces, then ReactJS is the best option but for mobile apps with a truly native feel, then React Native is the framework of choice.</p>",
            "postDescription": "React and React Native are two popular technologies in the app development industry. Now we will unwrap the mystery behind them."
        },
        {
            "postId": "8",
            "postTitle": "Create Pagination",
            "postTags": "react, css, utilities",
            "postType": "2",
            "postImage": "https://i.postimg.cc/TPqpLZ7z/pagination.png",
            "postDate": "12/14/2022",
            "postContent": "<h1>1. Create HTML</h1> <p>Simple HTML</p> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td>&lt;div className=\"pagination\"&gt;<br>&nbsp; &lt;a href=\"#\"&gt;&amp;laquo;&lt;/a&gt;<br>&nbsp; &lt;a href=\"#\"&gt;1&lt;/a&gt;<br>&nbsp; &lt;a href=\"#\"&gt;2&lt;/a&gt;<br>&nbsp; &lt;a href=\"#\"&gt;&amp;raquo;&lt;/a&gt;<br>&lt;/div&gt;</td> </tr> </tbody> </table> <h1>2. Setup Function</h1> <p>We need to implement a function that renders the page number according to our data</p> <p><img src=\"https://i.postimg.cc/JnJNY1qG/8-code.png\"></p> <p><strong>Using in jsx</strong></p> <p><img src=\"https://i.postimg.cc/R021T3wk/8-using.png\"></p>",
            "postDescription": "Create simple pagination data with react."
        },
        {
            "postId": "9",
            "postTitle": "Review about ES6",
            "postTags": "es6, javascript",
            "postType": "3",
            "postImage": "https://i.postimg.cc/Qd5cPLxL/ES6.png",
            "postDate": "12/15/2022",
            "postContent": "<h1>What is ES6?</h1> <p>ECMAScript 2015 (or ES6) for short is the sixth version of ECMAScript. It defines the standard for JavaScript implementations.<br>ES6 has many enhancements to make JavaScript programming easier and more enjoyable.<br>In particular, modern JavaScript libraries/frameworks such as ReactJs, Angular, Vue make great use of these new features.</p> <h1>1. Variables declared</h1> <p><span style=\"color: rgb(0, 0, 0);\">The differences between&nbsp;<strong>var</strong>,&nbsp;<strong>let</strong>, and&nbsp;<strong>const</strong>&nbsp;variable declaration in JavaScript include:</span><br>- Variables declared with&nbsp;<strong>var</strong>&nbsp;and&nbsp;<strong>const</strong>&nbsp;are scoped to the immediate function body.<br>- Variables declared with the&nbsp;<strong>var</strong>&nbsp;keyword are&nbsp;<em>hoisted</em>. Hoisting means that the variable can be accessed in their enclosing scope even before they are declared.<br>- Variables declared with the&nbsp;<strong>let</strong>&nbsp;keyword are block-scoped, which means the variables will have scope to the immediate enclosing block.</p> <p><img src=\"https://miro.medium.com/max/1400/1*yj0O5G2RRrYK_d9qkEqQQg.png\" alt=\"Var, Let and Const. No doubt, one of the more basic&hellip; | by Rick Glascock | Medium\" width=\"833\" height=\"518\"></p> <h1>2. Loop with for&hellip;of&nbsp;</h1> <div>The newly designed for of loop allows us to iterate over arrays or iterate over other iterable objects very easily.</div> <div> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td> <div>let letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];</div> <div>for&nbsp;(let&nbsp;letter&nbsp;of&nbsp;letters)&nbsp;{</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;console.log(letter);</div> <div>}</div> </td> </tr> </tbody> </table> </div> <h1>4. Template Literals&nbsp;</h1> <p>It makes it possible to embed variables or expressions into a string at any position without any hassle.<br>Template literals are created using the character ` ` (Near the ESC button) instead of the usual double quotes \" \" or single quotes ' '.<br>Variables or expressions can be placed inside strings using the ${...} syntax.</p> <table style=\"border-collapse: collapse; width: 100%; height: 198.8px;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr style=\"height: 198.8px;\"> <td style=\"height: 198.8px;\"> <p>// Multi-line string<br>let str = `I want a string<br>&nbsp; &nbsp; &nbsp;above multiple lines like this!`;</p> <p>// Create strings using variables and expressions<br>let a = 6;<br>let b = 9;<br>let result = `The sum of ${a} and ${b} is: ${a+b}.`;<br>console.log(result); // Sum of 6 and 9 is: 15.</p> </td> </tr> </tbody> </table> <h1>5. ARROW FUNCTION</h1> <p>Arrow Function is another cool feature in ES6. It provides a more concise syntax for writing function expressions by removing the function and return keywords.</p> <div> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td> <div>var&nbsp;divide&nbsp;=&nbsp;(x,&nbsp;y)&nbsp;=&gt;&nbsp;{</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(y&nbsp;!==&nbsp;0)&nbsp;{</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;/&nbsp;y;</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;}</div> <div>}</div> </td> </tr> </tbody> </table> </div> <h1>6. CLASSES</h1> <p>Classes in ES6 make it easier to create objects, implement inheritance using the extends keyword, and reuse code.<br>In ES6, you can declare a class using the new class keyword followed by the class name.</p> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td> <div>class Rectangle {</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;constructor(length,&nbsp;width)&nbsp;{</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.length&nbsp;=&nbsp;length;</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.width&nbsp;=&nbsp;width;</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;}</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;getArea()&nbsp;{</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.length&nbsp;*&nbsp;this.width;</div> <div>&nbsp;&nbsp;&nbsp;&nbsp;}</div> <div>}</div> </td> </tr> </tbody> </table> <h1>7. REST PARAMETERS</h1> <p>This parameter is especially useful in situations when you want to pass parameters to a function but you don't know exactly how many parameters you will need.The rest parameter is specified by prefixing the named parameter with the rest operator ... (three dots).</p> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td>function sortNumbers(...numbers) {<br>&nbsp; &nbsp; &nbsp;return numbers.sort();<br>}<br>console.log(sortNumbers(3, 5, 7);<br>// Result: [3, 5, 7]<br>console.log(sortNumbers(3, 5, 7, 1, 0);<br>// Result: [0, 1, 3, 5, 7]</td> </tr> </tbody> </table> <h1>8. SPREAD OPERATOR</h1> <p>The Spread operator, denoted by ..., performs the exact opposite function of the Rest operator.<br>The Spread operator an array and passes the values into the specified function, as shown in the following example:</p> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td>function addNumbers(a, b, c) {<br>&nbsp; &nbsp; &nbsp;return a + b + c;<br>}<br>let numbers = [2, 3, 4];<br>// Use Spread operator<br>alert(addNumbers(...numbers));<br>// Result is 9</td> </tr> </tbody> </table> <h1>9. DESTRUCTURING ASSIGNMENT</h1> <p>Destructive assignment is an expression that makes it easy to extract values from arrays, or properties from objects, into separate variables by providing a shorter syntax.</p> <table style=\"border-collapse: collapse; width: 100%;\" border=\"1\"><colgroup><col style=\"width: 99.906%;\"></colgroup> <tbody> <tr> <td>let colors = [\"Green\", \"Red\"];<br>let [a, b] = colors; // Assignment destroys array structure<br>console.log(a); // Green<br>console.log(b); // Red</td> </tr> </tbody> </table>",
            "postDescription": "JavaScript ES6 is a newer version of JavaScript introduced in 2015. This article will give you a brief summary of commonly used features."
        }
    ]
}